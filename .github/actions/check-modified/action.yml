name: "Check Modified Files"
description: "Checks for modified files matching a specified glob pattern"
inputs:
  glob_pattern:
    description: "Glob pattern to match files (including path)"
    required: true
outputs:
  modified_files:
    description: "List of modified files matching the glob pattern"
    value: ${{ steps.check_files.outputs.modified_files }}
  files_changed:
    description: "Boolean indicating if files were changed"
    value: ${{ steps.check_files.outputs.files_changed }}
runs:
  using: "composite"
  steps:
    - name: Check for modified files
      id: check_files
      shell: bash
      run: |
        # get git modified files
        if [ -z "${{ github.event.before }}" ] || [ "${{ github.event.before }}" == "${{ github.sha }}" ]; then
          # Fallback: Compare the most recent commit with its immediate parent
          base_sha="HEAD^"
        else
          base_sha="${{ github.event.before }}"
        fi

        printf "\033[1;33mAll modified files:\033[0m\n"
        git diff --name-only $base_sha ${{ github.sha }}
        echo "---------------------"

        # get all files in the repository matching the glob pattern
        all_matching_files=$(find . -type f -iwholename "./${{ inputs.glob_pattern }}")
        printf "\033[1;33mAll files in the repository matching '${{ inputs.glob_pattern }}':\033[0m\n"
        echo "$all_matching_files"
        echo "---------------------"

        modified_matching_files=""

        # filter modified based on the glob pattern
        while IFS= read -r line; do
          if echo "$all_matching_files" | grep -qxF "./$line"; then
            modified_matching_files+="$line "
          fi
        done < <(git diff --name-only $base_sha ${{ github.sha }})

        IFS=' ' read -r -a match_array <<< "$modified_matching_files"

        num_matches=${#match_array[@]}

        if [ "$num_matches" -eq 0 ]; then
            printf "\033[1;31mNo match found\033[0m\n"
        else
            printf "\033[1;32mFound %d Match(es)\033[0m\n" "$num_matches"
            echo $modified_matching_files
        fi

        # set outputs
        echo "modified_files=$modified_matching_files" >> $GITHUB_OUTPUT

        if [ -z "$modified_matching_files" ]; then
          echo ":files_changed=false"  >> $GITHUB_OUTPUT
        else
          echo ":files_changed=true"  >> $GITHUB_OUTPUT
        fi
